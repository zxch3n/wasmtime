initSidebarItems({"enum":[["Entry","An entry in the hashmap."],["NewOrExisting","A new or existing `T` when adding to a deduplicated set or data structure, like an egraph."]],"macro":[["trace","Conditionally-compiled trace-log macro. (Borrowed from `cranelift-codegen`; it’s not worth factoring out a common subcrate for this.)"]],"struct":[["BumpArena",""],["BumpSlice","A slice in an arena: like a `BumpVec`, but has a fixed size that cannot grow. The size of this struct is one 32-bit word smaller than `BumpVec`. It is copyable/cloneable because it will never be freed."],["BumpVec","A vector of `T` stored within a `BumpArena`."],["CtxHashMap","A HashMap that takes external context for all operations."],["EClass","An EClass entry. Contains either a single new enode and a parent eclass (i.e., adds one new enode), or unions two parent eclasses together."],["EGraph","An egraph."],["Id","An eclass ID."],["NodeIter","An iterator over all nodes in an eclass."],["NodeKey","A reference to a node."],["UnionFind","A union-find data structure. The data structure can allocate `Id`s, indicating eclasses, and can merge eclasses together."]],"trait":[["CtxEq","Trait that allows for equality comparison given some external context."],["CtxHash","Trait that allows for hashing given some external context."],["Language","A trait implemented by all “languages” (types that can be enodes)."]]});